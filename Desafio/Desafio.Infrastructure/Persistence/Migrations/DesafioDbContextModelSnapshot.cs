// <auto-generated />
using System;
using Desafio.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Desafio.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DesafioDbContext))]
    partial class DesafioDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Desafio.Core.Entities.DeliveryPerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CnhImageLocation")
                        .HasColumnType("text");

                    b.Property<string>("CnhNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CnhType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IdPerson")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CnhNumber")
                        .IsUnique();

                    b.HasIndex("IdPerson")
                        .IsUnique();

                    b.ToTable("TB_DELIVERY_PERSON", (string)null);
                });

            modelBuilder.Entity("Desafio.Core.Entities.Motorcycle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Plate")
                        .IsUnique();

                    b.ToTable("TB_MOTORCYCLE", (string)null);
                });

            modelBuilder.Entity("Desafio.Core.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("TB_PERSON", (string)null);
                });

            modelBuilder.Entity("Desafio.Core.Entities.Rent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpectedEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IdDeliveryPerson")
                        .HasColumnType("bigint");

                    b.Property<long>("IdMotorcycle")
                        .HasColumnType("bigint");

                    b.Property<int>("RentPlan")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdMotorcycle");

                    b.ToTable("TB_RENT", (string)null);
                });

            modelBuilder.Entity("Desafio.Core.Entities.DeliveryPerson", b =>
                {
                    b.HasOne("Desafio.Core.Entities.Person", "Person")
                        .WithOne("DeliveryPerson")
                        .HasForeignKey("Desafio.Core.Entities.DeliveryPerson", "IdPerson")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Desafio.Core.Entities.Rent", b =>
                {
                    b.HasOne("Desafio.Core.Entities.DeliveryPerson", "DeliveryPerson")
                        .WithMany("RelatedRentals")
                        .HasForeignKey("IdMotorcycle")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Desafio.Core.Entities.Motorcycle", "Motorcycle")
                        .WithMany("RelatedRentals")
                        .HasForeignKey("IdMotorcycle")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeliveryPerson");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("Desafio.Core.Entities.DeliveryPerson", b =>
                {
                    b.Navigation("RelatedRentals");
                });

            modelBuilder.Entity("Desafio.Core.Entities.Motorcycle", b =>
                {
                    b.Navigation("RelatedRentals");
                });

            modelBuilder.Entity("Desafio.Core.Entities.Person", b =>
                {
                    b.Navigation("DeliveryPerson")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
